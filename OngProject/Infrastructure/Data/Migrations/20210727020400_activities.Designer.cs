// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OngProject.Infrastructure.Data;

namespace OngProject.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210727020400_activities")]
    partial class activities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484310",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484311",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484312",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484313",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484314",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484315",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484316",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484317",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484318",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484319",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484330",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484331",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484332",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484333",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484334",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484335",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484336",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484337",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484338",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484339",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Test number 1",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 512, DateTimeKind.Local).AddTicks(8823),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Test number 2",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(8948),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 2"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Test number 3",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(8988),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 3"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Test number 4",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9006),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 4"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Test number 5",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9021),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 5"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Test number 6",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9039),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 6"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Test number 7",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9054),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 7"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Test number 8",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9069),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 8"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Test number 9",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9083),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 9"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Test number 10",
                            CreatedAt = new DateTime(2021, 7, 26, 23, 3, 59, 513, DateTimeKind.Local).AddTicks(9197),
                            Image = "https://placeimg.com/640/480/any",
                            IsDeleted = false,
                            Name = "Activity number 10"
                        });
                });

            modelBuilder.Entity("OngProject.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(65535)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("OngProject.Core.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutUsText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WelcomeText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Rol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "3",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7033",
                            ConcurrencyStamp = "4",
                            Name = "Common",
                            NormalizedName = "Common"
                        });
                });

            modelBuilder.Entity("OngProject.Core.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("OngProject.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484310",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fadb6ab9-b537-450d-b332-6b1410713393",
                            Email = "mail10@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 10",
                            IsDeleted = false,
                            LastName = "LastName 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail10@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENlXLpUY/CJjRBsXzIvWVwOhPcA4BwQCoqpp18ocMp53bzT3j+F7So75UX90bM941A==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aea1afa1-6412-464a-a8e1-edc4e6f36b28",
                            TwoFactorEnabled = false,
                            UserName = "User 10"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484311",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd7bb431-e217-49da-8e6b-a5cada1ef772",
                            Email = "mail11@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 11",
                            IsDeleted = false,
                            LastName = "LastName 11",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail11@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEObRP1lIsD1s9j6wq/CUdB57pxVNRWZdx8pNVIxm95eODH6rKo821L3Umhw3u0OWsg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b26d133d-b2a9-4b21-959a-c11905c4e3cd",
                            TwoFactorEnabled = false,
                            UserName = "User 11"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484312",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f374133-97fa-4ec0-9948-e40bddd9c16f",
                            Email = "mail12@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 12",
                            IsDeleted = false,
                            LastName = "LastName 12",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail12@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELcn5kGsa6lm4Y0f0hbMIcbYag4ohms708Mx6XbpHOnK9bOyBLXgW1fXVPw3/eot2Q==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac574163-de2e-497b-a45b-2c850f934a07",
                            TwoFactorEnabled = false,
                            UserName = "User 12"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7c6be13-8770-49d0-aa56-52853376087c",
                            Email = "mail13@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 13",
                            IsDeleted = false,
                            LastName = "LastName 13",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail13@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEN5Oh6ObECQzv41lQrQekiJLVh0ycIcfjddTUFeJJy9OkxigjeF0/HNJEmwhMBMOqg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a86efb7d-b827-40c9-96ab-960954f6b8db",
                            TwoFactorEnabled = false,
                            UserName = "User 13"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484314",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04ccd279-fdda-4811-9f7b-aff9fd121d36",
                            Email = "mail14@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 14",
                            IsDeleted = false,
                            LastName = "LastName 14",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail14@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyq6Sp8lRey+NE59ieDSXeqQbzRLt501sCFmd7mH6rj0SY3+781g+1C+QXntykhjw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef4ff561-245e-43af-a555-d8b66e8d7e1b",
                            TwoFactorEnabled = false,
                            UserName = "User 14"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484315",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd5d6f28-2c4b-4ee9-b0fe-fc503fe89479",
                            Email = "mail15@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 15",
                            IsDeleted = false,
                            LastName = "LastName 15",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail15@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEInR4xAVjcrO3toP6U756EcuE2neSU11eua6wZ33HrqrqE2ks3lrNdgUOuXSB1eUHw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b2dc00-7ce8-4285-b179-db090b9b51d1",
                            TwoFactorEnabled = false,
                            UserName = "User 15"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484316",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "491a99b0-500a-49ec-926c-319f5c12e96b",
                            Email = "mail16@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 16",
                            IsDeleted = false,
                            LastName = "LastName 16",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail16@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+HTQXTXTrfDQcr3zEt/056MOtyWL/IcW0qpjuCfOa4klkUlc7rHhNxdnOdjCBisw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83dce6d1-f9eb-420d-b069-240d7eb2a748",
                            TwoFactorEnabled = false,
                            UserName = "User 16"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484317",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddeddfa9-0e02-4824-bf66-c319a9ce2f92",
                            Email = "mail17@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 17",
                            IsDeleted = false,
                            LastName = "LastName 17",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail17@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAp4amO0yhjCcyPE1WTf42I+9AmKHiUVF436nih3ut+8qmHxJiuGx4kV5Uo5R3R4Qg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1b34016-c7c8-497f-a110-7759515f6d97",
                            TwoFactorEnabled = false,
                            UserName = "User 17"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484318",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "863710fc-da05-41a3-b169-536b9762bf4d",
                            Email = "mail18@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 18",
                            IsDeleted = false,
                            LastName = "LastName 18",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail18@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEC3HICkH8lMy7aqEM8V1+93KvKcm9U/S5NHwj/bsSOBkfIFJpCxDSKOr3e6Kah9kCg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d83099ba-6901-40e1-8742-3bd40cbef886",
                            TwoFactorEnabled = false,
                            UserName = "User 18"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484319",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6c9a3fb-e4da-4d8e-ba69-d199682fd101",
                            Email = "mail19@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 19",
                            IsDeleted = false,
                            LastName = "LastName 19",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail19@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDzNRYNs7+0ki+lQQbkSZ1g3ZJtztrySSQHfLvGitVY298iVYZCgiLGcVBr28qr7IQ==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dffffce2-3c73-4aab-b83a-5c1c4eb943b7",
                            TwoFactorEnabled = false,
                            UserName = "User 19"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484330",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de61a425-253a-44ce-96e7-2277f5a1be6c",
                            Email = "mail30@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 30",
                            IsDeleted = false,
                            LastName = "LastName 30",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail30@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHphpyWL+Ng/tCHrEPuR1ZAhUeU8uQgIVHJZA+Clxt2ou3LIcMbsK3LRLmVNABMQ5w==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97196f76-6a23-48a1-ab45-4f9fc1960dbe",
                            TwoFactorEnabled = false,
                            UserName = "User 30"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484331",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4e30497-4c88-4dea-a9e9-f3afff1d117b",
                            Email = "mail31@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 31",
                            IsDeleted = false,
                            LastName = "LastName 31",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail31@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAFS6MQF9qub7c8J2SfWE8ZEOHhuRJ5G7U3ukgV2wEq02VGOGMPXn/YCBrz5f734jw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8d0062b-32e1-462a-9d33-3dc8ec0c8e12",
                            TwoFactorEnabled = false,
                            UserName = "User 31"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484332",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1393ee1b-38a3-40e7-b510-129fda285850",
                            Email = "mail32@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 32",
                            IsDeleted = false,
                            LastName = "LastName 32",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail32@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFW+xC6w1Sniyd90X18mPKvGDTYWxV7oXBxbmDuaL6xhl0VYpyKcxgUdxV88JVFQKQ==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5af6fa6-1f68-4cff-aada-02e2f2572cdb",
                            TwoFactorEnabled = false,
                            UserName = "User 32"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1490ea90-40a4-4e96-bbb0-b418d509a49e",
                            Email = "mail33@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 33",
                            IsDeleted = false,
                            LastName = "LastName 33",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail33@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENm63HJOYrCuT/2+cBpIGFDkdgbDobxz8OkfqkUOWq0uoBapSLyRubEguLJ0EDWJEQ==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78319ace-57ee-4b36-826e-cbba8dc74d68",
                            TwoFactorEnabled = false,
                            UserName = "User 33"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484334",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3fac74a-e885-4c4b-9e27-7fc7e3f942f6",
                            Email = "mail34@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 34",
                            IsDeleted = false,
                            LastName = "LastName 34",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail34@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEIdS4lH5Gdb7cCNLEJmvC/yJjLRCZ26nVYtJ5jHf6GKWcrHNxNJq7KejuQ30T3I3Rg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d34bff98-e19e-40c1-8563-3040217de1ef",
                            TwoFactorEnabled = false,
                            UserName = "User 34"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484335",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a80895b-594e-478f-a8f0-eced764b2e8e",
                            Email = "mail35@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 35",
                            IsDeleted = false,
                            LastName = "LastName 35",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail35@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOBWHVstYDbUDk9Ioeoo6/gw9GJXI9xCl+Ejy6r8/c7fnnKpO27b0X7HWep74TnB4Q==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "994c6fa6-e997-48ad-87a1-ad519e5f3b79",
                            TwoFactorEnabled = false,
                            UserName = "User 35"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484336",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "903d50ce-9d48-4650-a63b-47f88c6a4f81",
                            Email = "mail36@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 36",
                            IsDeleted = false,
                            LastName = "LastName 36",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail36@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7esLTc4hJGKUed45iGQcFquOlhjHr0l77XiC3jbrETdGp5syTihY6fbyToptr6pg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "676480e7-0cf3-4a98-b72c-31cd30d3b20d",
                            TwoFactorEnabled = false,
                            UserName = "User 36"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484337",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8398961c-550c-40e6-aa2d-695b8c21ad96",
                            Email = "mail37@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 37",
                            IsDeleted = false,
                            LastName = "LastName 37",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail37@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAccTnUySDI2Rvr5diyayyO9Ijj9R4xMhaODbckSpPpyAu1ZwgqWsuKGqFdyX2k17w==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98bf932f-32b2-4662-90d6-35308df6ce17",
                            TwoFactorEnabled = false,
                            UserName = "User 37"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484338",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b22299da-0111-48c0-ad9c-9f01b950a8bb",
                            Email = "mail38@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 38",
                            IsDeleted = false,
                            LastName = "LastName 38",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail38@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEICLaQlfz6qd6bFHxO/RDsi7Lyh2FoFWBSJX0YraWK7hwHixL4QGrGyvJ8alSuZh/Q==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "614b848e-cf31-4c5b-a5a2-3c8c70b03c50",
                            TwoFactorEnabled = false,
                            UserName = "User 38"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484339",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ec84590-35fc-48b8-97b6-9a08b270ba02",
                            Email = "mail39@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 39",
                            IsDeleted = false,
                            LastName = "LastName 39",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail39@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELD3GgAQtdcwSb3GRlEAw6vSk9F+olm2+3NDNy/cYgu2dz99syFifA5MyrqrFWOi+w==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc533d66-df2e-49a9-81f8-e227b0e063b9",
                            TwoFactorEnabled = false,
                            UserName = "User 39"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OngProject.Core.Entities.Comment", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OngProject.Core.Entities.News", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Slide", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });
#pragma warning restore 612, 618
        }
    }
}
